apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-zone1
  labels:
    app: nginx-zone1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-zone1
  template:
    metadata:
      labels:
        app: nginx-zone1
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: log
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-zone2
  labels:
    app: nginx-zone2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-zone2
  template:
    metadata:
      labels:
        app: nginx-zone2
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: log
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-zone3
  labels:
    app: nginx-zone3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-zone3
  template:
    metadata:
      labels:
        app: nginx-zone3
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: log
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-zone4
  labels:
    app: nginx-zone4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-zone4
  template:
    metadata:
      labels:
        app: nginx-zone4
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: log
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-zone5
  labels:
    app: nginx-zone5
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-zone5
  template:
    metadata:
      labels:
        app: nginx-zone5
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf # place ConfigMap `nginx-conf` on /etc/nginx
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: log
        emptyDir: {}
